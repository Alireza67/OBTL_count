// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace OBTL_model_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/scratch/user/karb1367/OBTL_MCMC/demo/OBTL_model.stan");
    reader.add_event(86, 86, "end", "/scratch/user/karb1367/OBTL_MCMC/demo/OBTL_model.stan");
    return reader;
}

class OBTL_model_model : public prob_grad {
private:
    int n_t;
    int n_s;
    int d;
    int nu_mu;
    int nu_r;
    vector<double> M_t;
    vector<double> M_s;
    vector<double> S_t;
    vector<double> S_s;
    double rho_mu;
    double rho_r;
    vector<vector<int> > x;
    vector<matrix_d> L_mu;
    vector<matrix_d> L_r;
    vector<matrix_d> M;
    vector<matrix_d> S;
public:
    OBTL_model_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    OBTL_model_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "OBTL_model_model_namespace::OBTL_model_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n_t", "int", context__.to_vec());
            n_t = int(0);
            vals_i__ = context__.vals_i("n_t");
            pos__ = 0;
            n_t = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_s", "int", context__.to_vec());
            n_s = int(0);
            vals_i__ = context__.vals_i("n_s");
            pos__ = 0;
            n_s = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "d", "int", context__.to_vec());
            d = int(0);
            vals_i__ = context__.vals_i("d");
            pos__ = 0;
            d = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "nu_mu", "int", context__.to_vec());
            nu_mu = int(0);
            vals_i__ = context__.vals_i("nu_mu");
            pos__ = 0;
            nu_mu = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "nu_r", "int", context__.to_vec());
            nu_r = int(0);
            vals_i__ = context__.vals_i("nu_r");
            pos__ = 0;
            nu_r = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("M_t", "d", d);
            context__.validate_dims("data initialization", "M_t", "double", context__.to_vec(d));
            validate_non_negative_index("M_t", "d", d);
            M_t = std::vector<double>(d,double(0));
            vals_r__ = context__.vals_r("M_t");
            pos__ = 0;
            size_t M_t_limit_0__ = d;
            for (size_t i_0__ = 0; i_0__ < M_t_limit_0__; ++i_0__) {
                M_t[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("M_s", "d", d);
            context__.validate_dims("data initialization", "M_s", "double", context__.to_vec(d));
            validate_non_negative_index("M_s", "d", d);
            M_s = std::vector<double>(d,double(0));
            vals_r__ = context__.vals_r("M_s");
            pos__ = 0;
            size_t M_s_limit_0__ = d;
            for (size_t i_0__ = 0; i_0__ < M_s_limit_0__; ++i_0__) {
                M_s[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("S_t", "d", d);
            context__.validate_dims("data initialization", "S_t", "double", context__.to_vec(d));
            validate_non_negative_index("S_t", "d", d);
            S_t = std::vector<double>(d,double(0));
            vals_r__ = context__.vals_r("S_t");
            pos__ = 0;
            size_t S_t_limit_0__ = d;
            for (size_t i_0__ = 0; i_0__ < S_t_limit_0__; ++i_0__) {
                S_t[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("S_s", "d", d);
            context__.validate_dims("data initialization", "S_s", "double", context__.to_vec(d));
            validate_non_negative_index("S_s", "d", d);
            S_s = std::vector<double>(d,double(0));
            vals_r__ = context__.vals_r("S_s");
            pos__ = 0;
            size_t S_s_limit_0__ = d;
            for (size_t i_0__ = 0; i_0__ < S_s_limit_0__; ++i_0__) {
                S_s[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "rho_mu", "double", context__.to_vec());
            rho_mu = double(0);
            vals_r__ = context__.vals_r("rho_mu");
            pos__ = 0;
            rho_mu = vals_r__[pos__++];
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "rho_r", "double", context__.to_vec());
            rho_r = double(0);
            vals_r__ = context__.vals_r("rho_r");
            pos__ = 0;
            rho_r = vals_r__[pos__++];
            current_statement_begin__ = 13;
            validate_non_negative_index("x", "(n_t + n_s)", (n_t + n_s));
            validate_non_negative_index("x", "d", d);
            context__.validate_dims("data initialization", "x", "int", context__.to_vec((n_t + n_s),d));
            validate_non_negative_index("x", "(n_t + n_s)", (n_t + n_s));
            validate_non_negative_index("x", "d", d);
            x = std::vector<std::vector<int> >((n_t + n_s),std::vector<int>(d,int(0)));
            vals_i__ = context__.vals_i("x");
            pos__ = 0;
            size_t x_limit_1__ = d;
            for (size_t i_1__ = 0; i_1__ < x_limit_1__; ++i_1__) {
                size_t x_limit_0__ = (n_t + n_s);
                for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                    x[i_0__][i_1__] = vals_i__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"n_t",n_t,0);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"n_s",n_s,0);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"d",d,1);
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"nu_mu",nu_mu,2);
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"nu_r",nu_r,2);
            current_statement_begin__ = 7;
            for (int k0__ = 0; k0__ < d; ++k0__) {
                check_greater_or_equal(function__,"M_t[k0__]",M_t[k0__],0);
            }
            current_statement_begin__ = 8;
            for (int k0__ = 0; k0__ < d; ++k0__) {
                check_greater_or_equal(function__,"M_s[k0__]",M_s[k0__],0);
            }
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < d; ++k0__) {
                check_greater_or_equal(function__,"S_t[k0__]",S_t[k0__],0);
            }
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < d; ++k0__) {
                check_greater_or_equal(function__,"S_s[k0__]",S_s[k0__],0);
            }
            current_statement_begin__ = 11;
            check_greater_or_equal(function__,"rho_mu",rho_mu,0);
            current_statement_begin__ = 12;
            check_greater_or_equal(function__,"rho_r",rho_r,0);
            current_statement_begin__ = 13;
            // initialize data variables
            current_statement_begin__ = 16;
            validate_non_negative_index("L_mu", "d", d);
            validate_non_negative_index("L_mu", "2", 2);
            validate_non_negative_index("L_mu", "2", 2);
            L_mu = std::vector<matrix_d>(d,matrix_d(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2)));
            stan::math::fill(L_mu,DUMMY_VAR__);
            current_statement_begin__ = 17;
            validate_non_negative_index("L_r", "d", d);
            validate_non_negative_index("L_r", "2", 2);
            validate_non_negative_index("L_r", "2", 2);
            L_r = std::vector<matrix_d>(d,matrix_d(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2)));
            stan::math::fill(L_r,DUMMY_VAR__);
            current_statement_begin__ = 18;
            validate_non_negative_index("M", "d", d);
            validate_non_negative_index("M", "2", 2);
            validate_non_negative_index("M", "2", 2);
            M = std::vector<matrix_d>(d,matrix_d(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2)));
            stan::math::fill(M,DUMMY_VAR__);
            current_statement_begin__ = 19;
            validate_non_negative_index("S", "d", d);
            validate_non_negative_index("S", "2", 2);
            validate_non_negative_index("S", "2", 2);
            S = std::vector<matrix_d>(d,matrix_d(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2)));
            stan::math::fill(S,DUMMY_VAR__);

            current_statement_begin__ = 20;
            for (int i = 1; i <= d; ++i) {

                current_statement_begin__ = 21;
                stan::math::assign(get_base1_lhs(get_base1_lhs(M,i,"M",1),1,1,"M",2), get_base1(M_t,i,"M_t",1));
                current_statement_begin__ = 22;
                stan::math::assign(get_base1_lhs(get_base1_lhs(M,i,"M",1),2,2,"M",2), get_base1(M_s,i,"M_s",1));
                current_statement_begin__ = 23;
                stan::math::assign(get_base1_lhs(get_base1_lhs(M,i,"M",1),1,2,"M",2), stan::math::sqrt(((rho_mu * get_base1(M_t,i,"M_t",1)) * get_base1(M_s,i,"M_s",1))));
                current_statement_begin__ = 24;
                stan::math::assign(get_base1_lhs(get_base1_lhs(M,i,"M",1),2,1,"M",2), stan::math::sqrt(((rho_mu * get_base1(M_t,i,"M_t",1)) * get_base1(M_s,i,"M_s",1))));
                current_statement_begin__ = 25;
                stan::math::assign(get_base1_lhs(get_base1_lhs(S,i,"S",1),1,1,"S",2), get_base1(S_t,i,"S_t",1));
                current_statement_begin__ = 26;
                stan::math::assign(get_base1_lhs(get_base1_lhs(S,i,"S",1),2,2,"S",2), get_base1(S_s,i,"S_s",1));
                current_statement_begin__ = 27;
                stan::math::assign(get_base1_lhs(get_base1_lhs(S,i,"S",1),1,2,"S",2), stan::math::sqrt(((rho_r * get_base1(S_t,i,"S_t",1)) * get_base1(S_s,i,"S_s",1))));
                current_statement_begin__ = 28;
                stan::math::assign(get_base1_lhs(get_base1_lhs(S,i,"S",1),2,1,"S",2), stan::math::sqrt(((rho_r * get_base1(S_t,i,"S_t",1)) * get_base1(S_s,i,"S_s",1))));
                current_statement_begin__ = 29;
                stan::math::assign(get_base1_lhs(L_mu,i,"L_mu",1), cholesky_decompose(get_base1(M,i,"M",1)));
                current_statement_begin__ = 30;
                stan::math::assign(get_base1_lhs(L_r,i,"L_r",1), cholesky_decompose(get_base1(S,i,"S",1)));
            }

            // validate transformed data
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 34;
            validate_non_negative_index("c1_mu", "d", d);
            num_params_r__ += d;
            current_statement_begin__ = 35;
            validate_non_negative_index("c2_mu", "d", d);
            num_params_r__ += d;
            current_statement_begin__ = 36;
            validate_non_negative_index("z_mu", "d", d);
            num_params_r__ += d;
            current_statement_begin__ = 37;
            validate_non_negative_index("c1_r", "d", d);
            num_params_r__ += d;
            current_statement_begin__ = 38;
            validate_non_negative_index("c2_r", "d", d);
            num_params_r__ += d;
            current_statement_begin__ = 39;
            validate_non_negative_index("z_r", "d", d);
            num_params_r__ += d;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~OBTL_model_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("c1_mu")))
            throw std::runtime_error("variable c1_mu missing");
        vals_r__ = context__.vals_r("c1_mu");
        pos__ = 0U;
        validate_non_negative_index("c1_mu", "d", d);
        context__.validate_dims("initialization", "c1_mu", "double", context__.to_vec(d));
        std::vector<double> c1_mu(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            c1_mu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,c1_mu[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c1_mu: ") + e.what());
        }

        if (!(context__.contains_r("c2_mu")))
            throw std::runtime_error("variable c2_mu missing");
        vals_r__ = context__.vals_r("c2_mu");
        pos__ = 0U;
        validate_non_negative_index("c2_mu", "d", d);
        context__.validate_dims("initialization", "c2_mu", "double", context__.to_vec(d));
        std::vector<double> c2_mu(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            c2_mu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,c2_mu[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c2_mu: ") + e.what());
        }

        if (!(context__.contains_r("z_mu")))
            throw std::runtime_error("variable z_mu missing");
        vals_r__ = context__.vals_r("z_mu");
        pos__ = 0U;
        validate_non_negative_index("z_mu", "d", d);
        context__.validate_dims("initialization", "z_mu", "double", context__.to_vec(d));
        std::vector<double> z_mu(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            z_mu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_unconstrain(z_mu[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_mu: ") + e.what());
        }

        if (!(context__.contains_r("c1_r")))
            throw std::runtime_error("variable c1_r missing");
        vals_r__ = context__.vals_r("c1_r");
        pos__ = 0U;
        validate_non_negative_index("c1_r", "d", d);
        context__.validate_dims("initialization", "c1_r", "double", context__.to_vec(d));
        std::vector<double> c1_r(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            c1_r[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,c1_r[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c1_r: ") + e.what());
        }

        if (!(context__.contains_r("c2_r")))
            throw std::runtime_error("variable c2_r missing");
        vals_r__ = context__.vals_r("c2_r");
        pos__ = 0U;
        validate_non_negative_index("c2_r", "d", d);
        context__.validate_dims("initialization", "c2_r", "double", context__.to_vec(d));
        std::vector<double> c2_r(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            c2_r[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,c2_r[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c2_r: ") + e.what());
        }

        if (!(context__.contains_r("z_r")))
            throw std::runtime_error("variable z_r missing");
        vals_r__ = context__.vals_r("z_r");
        pos__ = 0U;
        validate_non_negative_index("z_r", "d", d);
        context__.validate_dims("initialization", "z_r", "double", context__.to_vec(d));
        std::vector<double> z_r(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            z_r[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_unconstrain(z_r[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_r: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> c1_mu;
            size_t dim_c1_mu_0__ = d;
            c1_mu.reserve(dim_c1_mu_0__);
            for (size_t k_0__ = 0; k_0__ < dim_c1_mu_0__; ++k_0__) {
                if (jacobian__)
                    c1_mu.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    c1_mu.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> c2_mu;
            size_t dim_c2_mu_0__ = d;
            c2_mu.reserve(dim_c2_mu_0__);
            for (size_t k_0__ = 0; k_0__ < dim_c2_mu_0__; ++k_0__) {
                if (jacobian__)
                    c2_mu.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    c2_mu.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> z_mu;
            size_t dim_z_mu_0__ = d;
            z_mu.reserve(dim_z_mu_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_mu_0__; ++k_0__) {
                if (jacobian__)
                    z_mu.push_back(in__.scalar_constrain(lp__));
                else
                    z_mu.push_back(in__.scalar_constrain());
            }

            vector<local_scalar_t__> c1_r;
            size_t dim_c1_r_0__ = d;
            c1_r.reserve(dim_c1_r_0__);
            for (size_t k_0__ = 0; k_0__ < dim_c1_r_0__; ++k_0__) {
                if (jacobian__)
                    c1_r.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    c1_r.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> c2_r;
            size_t dim_c2_r_0__ = d;
            c2_r.reserve(dim_c2_r_0__);
            for (size_t k_0__ = 0; k_0__ < dim_c2_r_0__; ++k_0__) {
                if (jacobian__)
                    c2_r.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    c2_r.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> z_r;
            size_t dim_z_r_0__ = d;
            z_r.reserve(dim_z_r_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_r_0__; ++k_0__) {
                if (jacobian__)
                    z_r.push_back(in__.scalar_constrain(lp__));
                else
                    z_r.push_back(in__.scalar_constrain());
            }


            // transformed parameters
            current_statement_begin__ = 42;
            validate_non_negative_index("A_mu", "2", 2);
            validate_non_negative_index("A_mu", "2", 2);
            validate_non_negative_index("A_mu", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > A_mu(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(A_mu, DUMMY_VAR__);
            stan::math::fill(A_mu,DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("A_r", "2", 2);
            validate_non_negative_index("A_r", "2", 2);
            validate_non_negative_index("A_r", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > A_r(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(A_r, DUMMY_VAR__);
            stan::math::fill(A_r,DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("MU", "2", 2);
            validate_non_negative_index("MU", "2", 2);
            validate_non_negative_index("MU", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > MU(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(MU, DUMMY_VAR__);
            stan::math::fill(MU,DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("R", "2", 2);
            validate_non_negative_index("R", "2", 2);
            validate_non_negative_index("R", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > R(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R,DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("mu_t", "d", d);
            vector<local_scalar_t__> mu_t(d);
            stan::math::initialize(mu_t, DUMMY_VAR__);
            stan::math::fill(mu_t,DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("mu_s", "d", d);
            vector<local_scalar_t__> mu_s(d);
            stan::math::initialize(mu_s, DUMMY_VAR__);
            stan::math::fill(mu_s,DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("r_t", "d", d);
            vector<local_scalar_t__> r_t(d);
            stan::math::initialize(r_t, DUMMY_VAR__);
            stan::math::fill(r_t,DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("r_s", "d", d);
            vector<local_scalar_t__> r_s(d);
            stan::math::initialize(r_s, DUMMY_VAR__);
            stan::math::fill(r_s,DUMMY_VAR__);


            current_statement_begin__ = 50;
            for (int i = 1; i <= d; ++i) {

                current_statement_begin__ = 51;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),1,2,"A_mu",2), 0.0);
                current_statement_begin__ = 52;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),1,2,"A_r",2), 0.0);
                current_statement_begin__ = 53;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),2,1,"A_mu",2), get_base1(z_mu,i,"z_mu",1));
                current_statement_begin__ = 54;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),2,1,"A_r",2), get_base1(z_r,i,"z_r",1));
                current_statement_begin__ = 55;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),1,1,"A_mu",2), stan::math::sqrt(get_base1(c1_mu,i,"c1_mu",1)));
                current_statement_begin__ = 56;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),1,1,"A_r",2), stan::math::sqrt(get_base1(c1_r,i,"c1_r",1)));
                current_statement_begin__ = 57;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),2,2,"A_mu",2), stan::math::sqrt(get_base1(c2_mu,i,"c2_mu",1)));
                current_statement_begin__ = 58;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),2,2,"A_r",2), stan::math::sqrt(get_base1(c2_r,i,"c2_r",1)));
                current_statement_begin__ = 59;
                stan::math::assign(get_base1_lhs(MU,i,"MU",1), multiply(multiply(multiply(get_base1(L_mu,i,"L_mu",1),get_base1(A_mu,i,"A_mu",1)),transpose(get_base1(A_mu,i,"A_mu",1))),transpose(get_base1(L_mu,i,"L_mu",1))));
                current_statement_begin__ = 60;
                stan::math::assign(get_base1_lhs(R,i,"R",1), multiply(multiply(multiply(get_base1(L_r,i,"L_r",1),get_base1(A_r,i,"A_r",1)),transpose(get_base1(A_r,i,"A_r",1))),transpose(get_base1(L_r,i,"L_r",1))));
                current_statement_begin__ = 61;
                stan::math::assign(get_base1_lhs(mu_t,i,"mu_t",1), get_base1(get_base1(MU,i,"MU",1),1,1,"MU",2));
                current_statement_begin__ = 62;
                stan::math::assign(get_base1_lhs(mu_s,i,"mu_s",1), get_base1(get_base1(MU,i,"MU",1),2,2,"MU",2));
                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(r_t,i,"r_t",1), get_base1(get_base1(R,i,"R",1),1,1,"R",2));
                current_statement_begin__ = 64;
                stan::math::assign(get_base1_lhs(r_s,i,"r_s",1), get_base1(get_base1(R,i,"R",1),2,2,"R",2));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < d; ++i0__) {
                for (int i1__ = 0; i1__ < 2; ++i1__) {
                    for (int i2__ = 0; i2__ < 2; ++i2__) {
                        if (stan::math::is_uninitialized(A_mu[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: A_mu" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                for (int i1__ = 0; i1__ < 2; ++i1__) {
                    for (int i2__ = 0; i2__ < 2; ++i2__) {
                        if (stan::math::is_uninitialized(A_r[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: A_r" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                for (int i1__ = 0; i1__ < 2; ++i1__) {
                    for (int i2__ = 0; i2__ < 2; ++i2__) {
                        if (stan::math::is_uninitialized(MU[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: MU" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                for (int i1__ = 0; i1__ < 2; ++i1__) {
                    for (int i2__ = 0; i2__ < 2; ++i2__) {
                        if (stan::math::is_uninitialized(R[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: R" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                if (stan::math::is_uninitialized(mu_t[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_t" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                if (stan::math::is_uninitialized(mu_s[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_s" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                if (stan::math::is_uninitialized(r_t[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_t" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                if (stan::math::is_uninitialized(r_s[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_s" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 42;
            current_statement_begin__ = 43;
            current_statement_begin__ = 44;
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;

            // model body

            current_statement_begin__ = 68;
            for (int i = 1; i <= d; ++i) {

                current_statement_begin__ = 69;
                lp_accum__.add(normal_log<propto__>(get_base1(z_mu,i,"z_mu",1), 0, 1));
                current_statement_begin__ = 70;
                lp_accum__.add(normal_log<propto__>(get_base1(z_r,i,"z_r",1), 0, 1));
                current_statement_begin__ = 71;
                lp_accum__.add(chi_square_log<propto__>(get_base1(c1_mu,i,"c1_mu",1), nu_mu));
                current_statement_begin__ = 72;
                lp_accum__.add(chi_square_log<propto__>(get_base1(c1_r,i,"c1_r",1), nu_r));
                current_statement_begin__ = 73;
                lp_accum__.add(chi_square_log<propto__>(get_base1(c2_mu,i,"c2_mu",1), (nu_mu - 1)));
                current_statement_begin__ = 74;
                lp_accum__.add(chi_square_log<propto__>(get_base1(c2_r,i,"c2_r",1), (nu_r - 1)));
            }
            current_statement_begin__ = 76;
            for (int i = 1; i <= n_t; ++i) {

                current_statement_begin__ = 77;
                for (int j = 1; j <= d; ++j) {

                    current_statement_begin__ = 78;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(x,i,"x",1),j,"x",2), get_base1(mu_t,j,"mu_t",1), get_base1(r_t,j,"r_t",1)));
                }
            }
            current_statement_begin__ = 81;
            for (int i = (n_t + 1); i <= (n_t + n_s); ++i) {

                current_statement_begin__ = 82;
                for (int j = 1; j <= d; ++j) {

                    current_statement_begin__ = 83;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(x,i,"x",1),j,"x",2), get_base1(mu_s,j,"mu_s",1), get_base1(r_s,j,"r_s",1)));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("c1_mu");
        names__.push_back("c2_mu");
        names__.push_back("z_mu");
        names__.push_back("c1_r");
        names__.push_back("c2_r");
        names__.push_back("z_r");
        names__.push_back("A_mu");
        names__.push_back("A_r");
        names__.push_back("MU");
        names__.push_back("R");
        names__.push_back("mu_t");
        names__.push_back("mu_s");
        names__.push_back("r_t");
        names__.push_back("r_s");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "OBTL_model_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> c1_mu;
        size_t dim_c1_mu_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_c1_mu_0__; ++k_0__) {
            c1_mu.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> c2_mu;
        size_t dim_c2_mu_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_c2_mu_0__; ++k_0__) {
            c2_mu.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> z_mu;
        size_t dim_z_mu_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_z_mu_0__; ++k_0__) {
            z_mu.push_back(in__.scalar_constrain());
        }
        vector<double> c1_r;
        size_t dim_c1_r_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_c1_r_0__; ++k_0__) {
            c1_r.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> c2_r;
        size_t dim_c2_r_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_c2_r_0__; ++k_0__) {
            c2_r.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> z_r;
        size_t dim_z_r_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_z_r_0__; ++k_0__) {
            z_r.push_back(in__.scalar_constrain());
        }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(c1_mu[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(c2_mu[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(z_mu[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(c1_r[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(c2_r[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(z_r[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 42;
            validate_non_negative_index("A_mu", "2", 2);
            validate_non_negative_index("A_mu", "2", 2);
            validate_non_negative_index("A_mu", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > A_mu(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(A_mu, DUMMY_VAR__);
            stan::math::fill(A_mu,DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("A_r", "2", 2);
            validate_non_negative_index("A_r", "2", 2);
            validate_non_negative_index("A_r", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > A_r(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(A_r, DUMMY_VAR__);
            stan::math::fill(A_r,DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("MU", "2", 2);
            validate_non_negative_index("MU", "2", 2);
            validate_non_negative_index("MU", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > MU(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(MU, DUMMY_VAR__);
            stan::math::fill(MU,DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("R", "2", 2);
            validate_non_negative_index("R", "2", 2);
            validate_non_negative_index("R", "d", d);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > R(d, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2))));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R,DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("mu_t", "d", d);
            vector<local_scalar_t__> mu_t(d);
            stan::math::initialize(mu_t, DUMMY_VAR__);
            stan::math::fill(mu_t,DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("mu_s", "d", d);
            vector<local_scalar_t__> mu_s(d);
            stan::math::initialize(mu_s, DUMMY_VAR__);
            stan::math::fill(mu_s,DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("r_t", "d", d);
            vector<local_scalar_t__> r_t(d);
            stan::math::initialize(r_t, DUMMY_VAR__);
            stan::math::fill(r_t,DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("r_s", "d", d);
            vector<local_scalar_t__> r_s(d);
            stan::math::initialize(r_s, DUMMY_VAR__);
            stan::math::fill(r_s,DUMMY_VAR__);


            current_statement_begin__ = 50;
            for (int i = 1; i <= d; ++i) {

                current_statement_begin__ = 51;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),1,2,"A_mu",2), 0.0);
                current_statement_begin__ = 52;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),1,2,"A_r",2), 0.0);
                current_statement_begin__ = 53;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),2,1,"A_mu",2), get_base1(z_mu,i,"z_mu",1));
                current_statement_begin__ = 54;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),2,1,"A_r",2), get_base1(z_r,i,"z_r",1));
                current_statement_begin__ = 55;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),1,1,"A_mu",2), stan::math::sqrt(get_base1(c1_mu,i,"c1_mu",1)));
                current_statement_begin__ = 56;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),1,1,"A_r",2), stan::math::sqrt(get_base1(c1_r,i,"c1_r",1)));
                current_statement_begin__ = 57;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_mu,i,"A_mu",1),2,2,"A_mu",2), stan::math::sqrt(get_base1(c2_mu,i,"c2_mu",1)));
                current_statement_begin__ = 58;
                stan::math::assign(get_base1_lhs(get_base1_lhs(A_r,i,"A_r",1),2,2,"A_r",2), stan::math::sqrt(get_base1(c2_r,i,"c2_r",1)));
                current_statement_begin__ = 59;
                stan::math::assign(get_base1_lhs(MU,i,"MU",1), multiply(multiply(multiply(get_base1(L_mu,i,"L_mu",1),get_base1(A_mu,i,"A_mu",1)),transpose(get_base1(A_mu,i,"A_mu",1))),transpose(get_base1(L_mu,i,"L_mu",1))));
                current_statement_begin__ = 60;
                stan::math::assign(get_base1_lhs(R,i,"R",1), multiply(multiply(multiply(get_base1(L_r,i,"L_r",1),get_base1(A_r,i,"A_r",1)),transpose(get_base1(A_r,i,"A_r",1))),transpose(get_base1(L_r,i,"L_r",1))));
                current_statement_begin__ = 61;
                stan::math::assign(get_base1_lhs(mu_t,i,"mu_t",1), get_base1(get_base1(MU,i,"MU",1),1,1,"MU",2));
                current_statement_begin__ = 62;
                stan::math::assign(get_base1_lhs(mu_s,i,"mu_s",1), get_base1(get_base1(MU,i,"MU",1),2,2,"MU",2));
                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(r_t,i,"r_t",1), get_base1(get_base1(R,i,"R",1),1,1,"R",2));
                current_statement_begin__ = 64;
                stan::math::assign(get_base1_lhs(r_s,i,"r_s",1), get_base1(get_base1(R,i,"R",1),2,2,"R",2));
            }

            // validate transformed parameters
            current_statement_begin__ = 42;
            current_statement_begin__ = 43;
            current_statement_begin__ = 44;
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_2__ = 0; k_2__ < 2; ++k_2__) {
                for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                    vars__.push_back(A_mu[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < 2; ++k_2__) {
                for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                    vars__.push_back(A_r[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < 2; ++k_2__) {
                for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                    vars__.push_back(MU[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < 2; ++k_2__) {
                for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                    vars__.push_back(R[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(mu_t[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(mu_s[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(r_t[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(r_s[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "OBTL_model_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c1_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c2_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c1_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c2_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "A_mu" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "A_r" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "MU" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "R" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c1_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c2_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c1_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c2_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "A_mu" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "A_r" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "MU" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_2__ = 1; k_2__ <= 2; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "R" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef OBTL_model_model_namespace::OBTL_model_model stan_model;

