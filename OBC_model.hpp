// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace OBC_model_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/scratch/user/karb1367/OBTL_MCMC/demo/OBC_model.stan");
    reader.add_event(32, 32, "end", "/scratch/user/karb1367/OBTL_MCMC/demo/OBC_model.stan");
    return reader;
}

class OBC_model_model : public prob_grad {
private:
    int n_t;
    int d;
    int nu_mu;
    int nu_r;
    vector<double> M_t;
    vector<double> S_t;
    vector<vector<int> > x_t;
public:
    OBC_model_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    OBC_model_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "OBC_model_model_namespace::OBC_model_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n_t", "int", context__.to_vec());
            n_t = int(0);
            vals_i__ = context__.vals_i("n_t");
            pos__ = 0;
            n_t = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "d", "int", context__.to_vec());
            d = int(0);
            vals_i__ = context__.vals_i("d");
            pos__ = 0;
            d = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "nu_mu", "int", context__.to_vec());
            nu_mu = int(0);
            vals_i__ = context__.vals_i("nu_mu");
            pos__ = 0;
            nu_mu = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "nu_r", "int", context__.to_vec());
            nu_r = int(0);
            vals_i__ = context__.vals_i("nu_r");
            pos__ = 0;
            nu_r = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("M_t", "d", d);
            context__.validate_dims("data initialization", "M_t", "double", context__.to_vec(d));
            validate_non_negative_index("M_t", "d", d);
            M_t = std::vector<double>(d,double(0));
            vals_r__ = context__.vals_r("M_t");
            pos__ = 0;
            size_t M_t_limit_0__ = d;
            for (size_t i_0__ = 0; i_0__ < M_t_limit_0__; ++i_0__) {
                M_t[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("S_t", "d", d);
            context__.validate_dims("data initialization", "S_t", "double", context__.to_vec(d));
            validate_non_negative_index("S_t", "d", d);
            S_t = std::vector<double>(d,double(0));
            vals_r__ = context__.vals_r("S_t");
            pos__ = 0;
            size_t S_t_limit_0__ = d;
            for (size_t i_0__ = 0; i_0__ < S_t_limit_0__; ++i_0__) {
                S_t[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("x_t", "n_t", n_t);
            validate_non_negative_index("x_t", "d", d);
            context__.validate_dims("data initialization", "x_t", "int", context__.to_vec(n_t,d));
            validate_non_negative_index("x_t", "n_t", n_t);
            validate_non_negative_index("x_t", "d", d);
            x_t = std::vector<std::vector<int> >(n_t,std::vector<int>(d,int(0)));
            vals_i__ = context__.vals_i("x_t");
            pos__ = 0;
            size_t x_t_limit_1__ = d;
            for (size_t i_1__ = 0; i_1__ < x_t_limit_1__; ++i_1__) {
                size_t x_t_limit_0__ = n_t;
                for (size_t i_0__ = 0; i_0__ < x_t_limit_0__; ++i_0__) {
                    x_t[i_0__][i_1__] = vals_i__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"n_t",n_t,0);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"d",d,1);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"nu_mu",nu_mu,2);
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"nu_r",nu_r,2);
            current_statement_begin__ = 6;
            for (int k0__ = 0; k0__ < d; ++k0__) {
                check_greater_or_equal(function__,"M_t[k0__]",M_t[k0__],0);
            }
            current_statement_begin__ = 7;
            for (int k0__ = 0; k0__ < d; ++k0__) {
                check_greater_or_equal(function__,"S_t[k0__]",S_t[k0__],0);
            }
            current_statement_begin__ = 8;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            validate_non_negative_index("chi_mu_t", "d", d);
            num_params_r__ += d;
            current_statement_begin__ = 12;
            validate_non_negative_index("chi_r_t", "d", d);
            num_params_r__ += d;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~OBC_model_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("chi_mu_t")))
            throw std::runtime_error("variable chi_mu_t missing");
        vals_r__ = context__.vals_r("chi_mu_t");
        pos__ = 0U;
        validate_non_negative_index("chi_mu_t", "d", d);
        context__.validate_dims("initialization", "chi_mu_t", "double", context__.to_vec(d));
        std::vector<double> chi_mu_t(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            chi_mu_t[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,chi_mu_t[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable chi_mu_t: ") + e.what());
        }

        if (!(context__.contains_r("chi_r_t")))
            throw std::runtime_error("variable chi_r_t missing");
        vals_r__ = context__.vals_r("chi_r_t");
        pos__ = 0U;
        validate_non_negative_index("chi_r_t", "d", d);
        context__.validate_dims("initialization", "chi_r_t", "double", context__.to_vec(d));
        std::vector<double> chi_r_t(d,double(0));
        for (int i0__ = 0U; i0__ < d; ++i0__)
            chi_r_t[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < d; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,chi_r_t[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable chi_r_t: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> chi_mu_t;
            size_t dim_chi_mu_t_0__ = d;
            chi_mu_t.reserve(dim_chi_mu_t_0__);
            for (size_t k_0__ = 0; k_0__ < dim_chi_mu_t_0__; ++k_0__) {
                if (jacobian__)
                    chi_mu_t.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    chi_mu_t.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> chi_r_t;
            size_t dim_chi_r_t_0__ = d;
            chi_r_t.reserve(dim_chi_r_t_0__);
            for (size_t k_0__ = 0; k_0__ < dim_chi_r_t_0__; ++k_0__) {
                if (jacobian__)
                    chi_r_t.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    chi_r_t.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 15;
            validate_non_negative_index("mu_t", "d", d);
            vector<local_scalar_t__> mu_t(d);
            stan::math::initialize(mu_t, DUMMY_VAR__);
            stan::math::fill(mu_t,DUMMY_VAR__);
            current_statement_begin__ = 16;
            validate_non_negative_index("r_t", "d", d);
            vector<local_scalar_t__> r_t(d);
            stan::math::initialize(r_t, DUMMY_VAR__);
            stan::math::fill(r_t,DUMMY_VAR__);


            current_statement_begin__ = 17;
            for (int i = 1; i <= d; ++i) {

                current_statement_begin__ = 18;
                stan::math::assign(get_base1_lhs(mu_t,i,"mu_t",1), (get_base1(M_t,i,"M_t",1) * get_base1(chi_mu_t,i,"chi_mu_t",1)));
                current_statement_begin__ = 19;
                stan::math::assign(get_base1_lhs(r_t,i,"r_t",1), (get_base1(S_t,i,"S_t",1) * get_base1(chi_r_t,i,"chi_r_t",1)));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < d; ++i0__) {
                if (stan::math::is_uninitialized(mu_t[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_t" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < d; ++i0__) {
                if (stan::math::is_uninitialized(r_t[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_t" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;

            // model body

            current_statement_begin__ = 23;
            for (int i = 1; i <= d; ++i) {

                current_statement_begin__ = 24;
                lp_accum__.add(chi_square_log<propto__>(get_base1(chi_mu_t,i,"chi_mu_t",1), nu_mu));
                current_statement_begin__ = 25;
                lp_accum__.add(chi_square_log<propto__>(get_base1(chi_r_t,i,"chi_r_t",1), nu_r));
            }
            current_statement_begin__ = 27;
            for (int i = 1; i <= n_t; ++i) {

                current_statement_begin__ = 28;
                for (int j = 1; j <= d; ++j) {

                    current_statement_begin__ = 29;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(x_t,i,"x_t",1),j,"x_t",2), get_base1(mu_t,j,"mu_t",1), get_base1(r_t,j,"r_t",1)));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("chi_mu_t");
        names__.push_back("chi_r_t");
        names__.push_back("mu_t");
        names__.push_back("r_t");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "OBC_model_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> chi_mu_t;
        size_t dim_chi_mu_t_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_chi_mu_t_0__; ++k_0__) {
            chi_mu_t.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> chi_r_t;
        size_t dim_chi_r_t_0__ = d;
        for (size_t k_0__ = 0; k_0__ < dim_chi_r_t_0__; ++k_0__) {
            chi_r_t.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(chi_mu_t[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(chi_r_t[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 15;
            validate_non_negative_index("mu_t", "d", d);
            vector<local_scalar_t__> mu_t(d);
            stan::math::initialize(mu_t, DUMMY_VAR__);
            stan::math::fill(mu_t,DUMMY_VAR__);
            current_statement_begin__ = 16;
            validate_non_negative_index("r_t", "d", d);
            vector<local_scalar_t__> r_t(d);
            stan::math::initialize(r_t, DUMMY_VAR__);
            stan::math::fill(r_t,DUMMY_VAR__);


            current_statement_begin__ = 17;
            for (int i = 1; i <= d; ++i) {

                current_statement_begin__ = 18;
                stan::math::assign(get_base1_lhs(mu_t,i,"mu_t",1), (get_base1(M_t,i,"M_t",1) * get_base1(chi_mu_t,i,"chi_mu_t",1)));
                current_statement_begin__ = 19;
                stan::math::assign(get_base1_lhs(r_t,i,"r_t",1), (get_base1(S_t,i,"S_t",1) * get_base1(chi_r_t,i,"chi_r_t",1)));
            }

            // validate transformed parameters
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(mu_t[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(r_t[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "OBC_model_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "chi_mu_t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "chi_r_t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "chi_mu_t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "chi_r_t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef OBC_model_model_namespace::OBC_model_model stan_model;

